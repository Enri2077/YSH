"use strict";

function serviceSubscription(Subscription){
	console.log("serviceSubscription");
	var t = this;
	var subscriptionsWriteLock	= false;
	var subscriptionsQueue		= new Array();
	var subscriptionsQueueLimit	= 1000;
	var historyWriteLock		= false;
	var historyEntryQueue		= new Array();
	
	this.getSubscriptions = function(callback){
		chrome.storage.local.get(['subscriptions','history', 'subscriptionOptions'], function(storage){
			if(!storage.subscriptions)			storage.subscriptions = new Object();
			if(!storage.history)				storage.history = new Object();
			if(!storage.subscriptionOptions)	storage.subscriptionOptions = new Object();
			
			var subscriptionsLookup = new Object();
			
			Object.keys(storage.subscriptions).forEach(function(channelId){
				
				var history = storage.history[channelId] || new Array();
				var options = storage.subscriptionOptions[channelId] || new Object();
				var pinPriority = options.pinPriority || 0;
				
				subscriptionsLookup[channelId] = Subscription.fromStorageObject(storage.subscriptions[channelId], pinPriority, history);
				
			});
			
			callback(subscriptionsLookup);
		});
	};
	
	this.getSubscriptionData = function(subscription, callback){
		chrome.storage.local.get(['history', 'subscriptionOptions'], function(storage){
			if(!storage.subscriptionOptions) 							storage.subscriptionOptions = new Object();
			if(!storage.subscriptionOptions[subscription.channelId])	storage.subscriptionOptions[subscription.channelId] = {"pinPriority": 0};
			if(!storage.history)										storage.history = new Object();
			if(!storage.history[subscription.channelId])				storage.history[subscription.channelId] = new Array();
			
			callback(storage.history[subscription.channelId], storage.subscriptionOptions[subscription.channelId].pinPriority);
		});
	};
	
	
	this.saveSubscription = function(subscription, callback){
		var s = this;
	
		if(subscriptionsWriteLock){
			if(subscriptionsQueue.length <= subscriptionsQueueLimit){
				subscriptionsQueue.push(subscription);
				console.log("subscriptionsWriteLock: write queued ", subscriptionsQueue.length);
				if(callback) callback();
				return;		
			}else{
				console.log("subscriptionsWriteLock: write dropped ", subscriptionsQueue.length);
				if(callback) callback();
				return;		
			}
			
		}
		subscriptionsWriteLock = true;
		
		chrome.storage.local.get('subscriptions', function(storage){
			if(!storage.subscriptions){
				console.log("saveSubscription: subscriptions not defined; assigning new object");
				storage.subscriptions = new Object();
			}
			
			if(compareSubs(storage.subscriptions[subscription.channelId], subscription.toStorageObject())){
				
				if(subscriptionsQueue.length){
					
					var unqueuedSubscription = subscriptionsQueue.shift();
					console.log("subscriptionsWriteLock: write unqueued ", subscriptionsQueue.length);
					subscriptionsWriteLock = false;
					s.saveSubscription(unqueuedSubscription, callback);
				}else{
					subscriptionsWriteLock = false;
					if(callback) callback();
				}
			}else{
				storage.subscriptions[subscription.channelId] = subscription.toStorageObject();
				//console.log("save   sub", subscription.toStorageObject());
				
				chrome.storage.local.set(storage, function(){
					
					if(subscriptionsQueue.length){
						
						var unqueuedSubscription = subscriptionsQueue.shift();
						console.log("subscriptionsWriteLock: write unqueued ", subscriptionsQueue.length);
						subscriptionsWriteLock = false;
						s.saveSubscription(unqueuedSubscription, callback);
					}else{
						subscriptionsWriteLock = false;
						if(callback) callback();
					}
					
				});
				
			}
			
		});
	};
	
	this.saveSubscriptionOptions = function(subscription, callback){
		chrome.storage.local.get('subscriptionOptions', function(storage){
			if(!storage.subscriptionOptions){
				console.log("saveSubscriptionOptions: subscription options not defined; assigning new object");
				storage.subscriptionOptions = new Object();
			}
			
			storage.subscriptionOptions[subscription.channelId] = {pinPriority: subscription.pinPriority};
			
			chrome.storage.local.set(storage, callback);
		
		});
	};
	
	this.storeHistoryEntries = function(entries, callback){
		var s = this;
		
		if(historyWriteLock){
			historyEntryQueue = historyEntryQueue.concat(entries);
			console.log("historyWriteLock: write queued: ", historyEntryQueue);
			if(callback) callback();
			return;
		}
		historyWriteLock = true;
		
		chrome.storage.local.get('history', function(storage){
			if(!storage.history){
				console.log("storeHistoryEntries: history not defined; assigning new object");
				storage.history = new Object();
			}
			
			entries.forEach(function(entry){
				if(!storage.history[entry.channelId]){
					console.log("storeHistoryEntries: subscription not in history; assigning new object");
					storage.history[entry.channelId] = new Array();
				}
				
				storage.history[entry.channelId].push({date: entry.date.getTime(), videoId: entry.videoId});
			});
			
			chrome.storage.local.set(storage, function(){
				if(historyEntryQueue.length){
					
					var tmpHistoryEntryQueue = historyEntryQueue;
					historyEntryQueue = new Array();
					
					//console.log(tmpHistoryEntryQueue);
					
					historyWriteLock = false;
					
					s.storeHistoryEntries(tmpHistoryEntryQueue, callback);
					
				}else{
					historyWriteLock = false;
					if(callback) callback();
				}
			});
			
		});
	};
	
	/* TODO REMOVE
	
	this.unstoreSubscription = function(channelId, callback){
	
		// NOT WRITE LOCKED !!
	
		chrome.storage.local.get('subscriptions', function(storage){
			if(!storage.subscriptions){
				console.log("unstoreSubscriptions: subscriptions not defined; assigning new object");
				storage.subscriptions = new Object();
			}
		
			if(storage.subscriptions[channelId]){
				if(subscriptionsWriteLock) console.log("subscriptionsWriteLock: lock f-up");
				delete storage.subscriptions[channelId];
				chrome.storage.local.set(storage, callback);
			}else{
				if(callback) callback;
			}
		
		});
	
	};
	*/
	
	function compareSubs(s1, s2){
		if(s1 == undefined || s2 == undefined) return false;
		
		if((s1.uploads!=undefined) != (s2.uploads!=undefined)) return false;
		
		if(s1.uploads && s2.uploads) if(s1.uploads.length != s2.uploads.length) return false;
		/*
		if((s1.pinPriority!=undefined) != (s2.pinPriority!=undefined)) return false;
		
		if(s1.pinPriority != s2.pinPriority) return false;
		*/
		return true;
	};
	
}

